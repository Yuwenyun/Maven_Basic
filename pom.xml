<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.owen</groupId>
	<artifactId>Maven_Basic</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<!-- possible values of <packaging>: 
		1. pom: all the dependencies in this pom will be grouped together, by running the 
		   command "mvn clean install", the project is installed in repository and is able to be refered 
		   in other maven project which uses all the dependencies here. 
	-->
	<packaging>jar</packaging>

	<!-- 1. all the pom.xml inherit from super pom.xml and super pom.xml disabled snapshots version by default 
		 2. "mvn help:effective-pom" will print out the merged pom.xml of super pom.xml and project pom.xml 
		 3. version structure: <major version>.<minor version>.<incremental version>-<qualifier> 
		 4. version with SNAPSHOT string will be expanded to date and time 
		 5. maven properties: 
			1> ${env.PATH} is the value of $PATH, "env" is the environment of system 
			2> project: expose the pom.xml, ${project.groupId} = com.owen 
			3> settings: expose the ../.m2/settings.xml, ${settings.offline} is the offline element of settings.xml 
			4> any variable accessible through System.getProperty("") in java is able to be accessed, ${user.name} 
			5> define variable in <properties></properties> 
		 6. dependency scope: 
		    1> compile: default scope, dependency will be packaged 
			2> provided: dependency only needed when compile and test, it's provided by container 
			3> runtime: dependency available when execute and test the project, not compile 
			4> test: only needed when testing 
			5> 
	-->

	<name>Maven_Basic</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.artifactId>Maven_Basic</project.artifactId>
	</properties>

	<!-- all of the child pom.xml of this pom.xml will inherit the dependencies 
		here -->
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<!-- version support a range -->
			<version>[3.8, 4.0)</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jms</artifactId>
			<version>4.3.3.RELEASE</version>
			<!-- exclude transitive dependency if there is better dependency for sprint-jms -->
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-aop</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<!-- all the child pom.xml of this pom.xml who refers mysql:mysql-connector-java 
		do not need to specify the version since it's inherited from this parent 
		pom.xml -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>5.1.2</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<resources>
			<resource>
				<directory>test</directory>
				<!-- enable args of maven to be writen to the "test" folder specified in above directory tag, 
				     mvn resources:resources -Dname=Owen -->
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<!-- clean goal of clean plugin, attached with clean phase -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<!-- disable the deletion of "target" folder -->
					<excludeDefaultDirectories>true</excludeDefaultDirectories>
					<!-- define the files that are to be deleted -->
					<filesets>
						<fileset>
							<directory>test</directory>
							<includes>
								<include>*.class</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<!-- package all the files in test folder to myResources folder -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<goals>
					<goal>copy-resources</goal>
				</goals>
				<configuration>
					<outputDirectory>${basedir}/myResources</outputDirectory>
					<resources>
						<resource>
							<directory>test</directory>
							<filtering>true</filtering>
						</resource>
					</resources>
				</configuration>
			</plugin>
			<!-- compile the source code with jdk 1.8, by default, maven use 1.5 -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<goals>
					<goal>compile</goal>
				</goals>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<!-- package the project to jar with classes as classifier -->
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<goals>
					<goal>jar</goal>
				</goals>
				<configuration>
					<classesDirectory>src/main/java</classesDirectory>
					<classifier>classes</classifier>
					<outputDirectory>myJarFile</outputDirectory>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<descriptors>
						<descriptor>assembly.xml</descriptor>
						<!-- package resources files only  -->
						<descriptor>resource_assembly.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<useJvmChmod>true</useJvmChmod>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	
	<!-- <profiles> defines a set of configurations for different environments, to activate the profile,
	     add command -PprofileName as the arg for command
	-->
	<profiles>
		<profile>
			<id>production</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId> 
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.7.0</version>
						<configuration>
							<debug>false</debug>
							<optimize>true</optimize>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
